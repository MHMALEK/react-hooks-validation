{"version":3,"sources":["logo.svg","components/form/types.js","components/form/utils/validation-patterns.js","components/form/utils/validator-functions.js","components/form/validation/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","validationTypes","onlyNumberValidationPattern","emailPattern","validatorFunctions","value","parameter","toString","length","test","pattern","Validation","children","rules","getValue","changeValidationStatus","useState","errors","setErrors","isValid","setIsValid","requiredValidations","Object","keys","useEffect","checkValueValidation","map","rule","params","checkIfTheValueIsValid","includes","index","indexOf","newErrors","filter","item","indexOfArr","unsetError","setError","element","React","Children","child","cloneElement","onChange","e","target","name","handleOnChangeWithValidation","error","key","errorMessage","App","className","src","logo","alt","maxLength","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dc925ee8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const ValidationRule = {\n  parameter: 0,\n  errorMessage: \"error\"\n};\n\nexport const validationTypes = {\n  maxLength: \"maxLength\",\n  minLength: \"minLength\",\n  onlyNumber: \"onlyNumber\",\n  isRequired: \"isRequired\",\n  email: \"email\",\n  customPattern: \"customPattern\"\n};\n","const onlyNumberValidationPattern = /^[0-9]+$/;\nconst emailPattern = /^\\S+@\\S+\\.\\S+$/;\n\nexport { onlyNumberValidationPattern, emailPattern };\n","import { validationTypes } from '../types';\nimport {\n  onlyNumberValidationPattern,\n  emailPattern,\n} from './validation-patterns';\n\nconst validatorFunctions = {\n  [validationTypes.maxLength]: (value, parameter) => {\n    let stringifiedValue;\n    if (typeof value !== 'string') {\n      stringifiedValue = value.toString();\n    } else {\n      stringifiedValue = value;\n    }\n    if (stringifiedValue.length > parameter) {\n      return false;\n    }\n    return true;\n  },\n  [validationTypes.minLength]: (value, parameter) => {\n    let stringifiedValue;\n    if (typeof value !== 'string') {\n      stringifiedValue = value.toString();\n    } else {\n      stringifiedValue = value;\n    }\n\n    if (stringifiedValue.length < parameter) {\n      return false;\n    }\n    return true;\n  },\n  [validationTypes.onlyNumber]: (value) => {\n    if (!onlyNumberValidationPattern.test(value)) {\n      return false;\n    }\n    return true;\n  },\n  [validationTypes.isRequired]: (value) => {\n    if (!value && value === '') {\n      return false;\n    }\n    return true;\n  },\n  [validationTypes.email]: (value) => {\n    if (emailPattern.test(value)) {\n      return false;\n    }\n    return true;\n  },\n  [validationTypes.customPattern]: (value, pattern) => {\n    if (!pattern.test(value)) {\n      return false;\n    }\n    return true;\n  },\n};\n\nexport default validatorFunctions;\n","import React, { useEffect, useState } from \"react\";\nimport validatorFunctions from \"../utils/validator-functions\";\n\n// interface ValidationProps {\n//   children: React.ReactChild;\n//   rules: ValidationObject;\n//   getValue: (name: string, value: string) => void;\n//   changeValidationStatus?: (isValid: boolean) => void;\n// }\nconst Validation = ({ children, rules, getValue, changeValidationStatus }) => {\n  const [errors, setErrors] = useState([]);\n  const [isValid, setIsValid] = useState();\n  const requiredValidations = Object.keys(rules);\n\n  useEffect(() => {\n    if (changeValidationStatus && errors) {\n      if (errors.length === 0) return setIsValid(true);\n      return setIsValid(false);\n    }\n    return undefined;\n  }, [errors]);\n\n  useEffect(() => {\n    changeValidationStatus(isValid);\n  }, [isValid]);\n\n  const setError = rule => {\n    if (!errors.includes(rule)) {\n      setErrors([...errors, rule]);\n    }\n  };\n\n  const unsetError = rule => {\n    if (errors.includes(rule)) {\n      const index = errors.indexOf(rule);\n      const newErrors = errors.filter(\n        (item, indexOfArr) => index !== indexOfArr\n      );\n      setErrors(newErrors);\n    }\n    if (errors.length === 0) {\n      changeValidationStatus(isValid);\n      setIsValid(true);\n    }\n  };\n\n  const checkIfTheValueIsValid = (rule, params, value) => {\n    return validatorFunctions[rule](value, params);\n  };\n\n  const checkValueValidation = value => {\n    requiredValidations.map(rule => {\n      const params = rules[rule].parameter;\n      if (checkIfTheValueIsValid(rule, params, value)) {\n        return unsetError(rule);\n      }\n      return setError(rule);\n    });\n  };\n\n  const handleOnChangeWithValidation = e => {\n    const { value, name } = e.target;\n    getValue(name, value);\n    checkValueValidation(value);\n  };\n\n  const element = React.Children.map(children, child => {\n    return React.cloneElement(child, {\n      onChange: e => handleOnChangeWithValidation(e)\n    });\n  });\n\n  return (\n    <>\n      <div>{element}</div>\n      <div>\n        {errors &&\n          errors.length > 0 &&\n          errors.map((error, index) => (\n            <div key={index}>{rules[error].errorMessage}</div>\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default Validation;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Validation from \"./components/form/validation\";\n\nfunction App() {\n  const onChange = (name, value) => {\n    console.log(value, name);\n  };\n  const onValidationStatusChange = isValid => {\n    console.log(isValid);\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Validation\n          rules={{\n            maxLength: {\n              parameter: 3,\n              errorMessage: <p>max length error</p>\n            }\n          }}\n          getValue={onChange}\n          changeValidationStatus={onValidationStatusChange}\n        >\n          <input name=\"malek\" />\n        </Validation>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}